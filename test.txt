package com.lastfom.lflauncher;

import android.animation.*;
import android.app.*;
import android.app.Activity;
import android.content.*;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.*;
import android.graphics.*;
import android.graphics.Typeface;
import android.graphics.drawable.*;
import android.media.*;
import android.net.*;
import android.net.Uri;
import android.os.*;
import android.text.*;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.style.*;
import android.util.*;
import android.view.*;
import android.view.View;
import android.view.View.*;
import android.view.animation.*;
import android.webkit.*;
import android.widget.*;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import androidx.annotation.*;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.GenericTypeIndicator;
import com.google.firebase.database.ValueEventListener;
import java.io.*;
import java.text.*;
import java.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import java.util.regex.*;
import okhttp3.*;
import org.json.*;
import android.content.pm.ActivityInfo;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.Glide;  // Đảm bảo Glide đã được import;

public class JavacodeActivity extends AppCompatActivity {
	
	private Timer _timer = new Timer();
	private FirebaseDatabase _firebase = FirebaseDatabase.getInstance();
	
	private double n1 = 0;
	private HashMap<String, Object> cacheMap = new HashMap<>();
	private boolean a = false;
	private boolean show = false;
	private boolean b = false;
	private boolean c = false;
	private boolean d = false;
	private boolean f = false;
	
	private ArrayList<HashMap<String, Object>> maplist = new ArrayList<>();
	private ArrayList<HashMap<String, Object>> cache = new ArrayList<>();
	
	private LinearLayout bin;
	private LinearLayout toolbar;
	private LinearLayout voi;
	private LinearLayout tools;
	private LinearLayout barchung;
	private ImageView imageview7;
	private ImageView search_btn;
	private LinearLayout linear109;
	private ImageView imageview6;
	private LinearLayout search_bar;
	private EditText edittext1;
	private ImageView close;
	private ListView listview1;
	private LinearLayout allv;
	private LinearLayout betaLinear;
	private LinearLayout alphaLinear;
	private LinearLayout moddedLinear;
	private LinearLayout patchLinear;
	private LinearLayout linear114;
	private TextView all;
	private LinearLayout green0;
	private TextView beta;
	private LinearLayout green1;
	private TextView release;
	private LinearLayout green2;
	private TextView client;
	private LinearLayout green3;
	private TextView textview1;
	private LinearLayout green4;
	private TextView saves;
	
	private Intent i = new Intent();
	private DatabaseReference code = _firebase.getReference("code");
	private ChildEventListener _code_child_listener;
	private FirebaseAuth auth;
	private OnCompleteListener<AuthResult> _auth_create_user_listener;
	private OnCompleteListener<AuthResult> _auth_sign_in_listener;
	private OnCompleteListener<Void> _auth_reset_password_listener;
	private OnCompleteListener<Void> auth_updateEmailListener;
	private OnCompleteListener<Void> auth_updatePasswordListener;
	private OnCompleteListener<Void> auth_emailVerificationSentListener;
	private OnCompleteListener<Void> auth_deleteUserListener;
	private OnCompleteListener<Void> auth_updateProfileListener;
	private OnCompleteListener<AuthResult> auth_phoneAuthListener;
	private OnCompleteListener<AuthResult> auth_googleSignInListener;
	
	private DatabaseReference user = _firebase.getReference("user");
	private ChildEventListener _user_child_listener;
	private TimerTask timer;
	private SharedPreferences java;
	private SharedPreferences language;
	
	@Override
	protected void onCreate(Bundle _savedInstanceState) {
		super.onCreate(_savedInstanceState);
// do not remove this method 
language = getSharedPreferences("language", Activity.MODE_PRIVATE);
if (language.contains("language")) {
	Locale locale = new Locale(language.getString("language", "en"));
	Locale.setDefault(locale);
	Resources resources = getResources();
	Configuration config = resources.getConfiguration();
	
	// Update the app configuration with the new locale
	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
		config.setLocale(locale);
		getApplicationContext().createConfigurationContext(config);
	} else {
		config.locale = locale;
	}
	
	// Update the configuration in resources
	resources.updateConfiguration(config, resources.getDisplayMetrics());
}
		setContentView(R.layout.javacode);
		initialize(_savedInstanceState);
		FirebaseApp.initializeApp(this);
		initializeLogic();
	}
	
	private void initialize(Bundle _savedInstanceState) {
		bin = findViewById(R.id.bin);
		toolbar = findViewById(R.id.toolbar);
		voi = findViewById(R.id.voi);
		tools = findViewById(R.id.tools);
		barchung = findViewById(R.id.barchung);
		imageview7 = findViewById(R.id.imageview7);
		search_btn = findViewById(R.id.search_btn);
		linear109 = findViewById(R.id.linear109);
		imageview6 = findViewById(R.id.imageview6);
		search_bar = findViewById(R.id.search_bar);
		edittext1 = findViewById(R.id.edittext1);
		close = findViewById(R.id.close);
		listview1 = findViewById(R.id.listview1);
		allv = findViewById(R.id.allv);
		betaLinear = findViewById(R.id.betaLinear);
		alphaLinear = findViewById(R.id.alphaLinear);
		moddedLinear = findViewById(R.id.moddedLinear);
		patchLinear = findViewById(R.id.patchLinear);
		linear114 = findViewById(R.id.linear114);
		all = findViewById(R.id.all);
		green0 = findViewById(R.id.green0);
		beta = findViewById(R.id.beta);
		green1 = findViewById(R.id.green1);
		release = findViewById(R.id.release);
		green2 = findViewById(R.id.green2);
		client = findViewById(R.id.client);
		green3 = findViewById(R.id.green3);
		textview1 = findViewById(R.id.textview1);
		green4 = findViewById(R.id.green4);
		saves = findViewById(R.id.saves);
		auth = FirebaseAuth.getInstance();
		java = getSharedPreferences("java", Activity.MODE_PRIVATE);
		language = getSharedPreferences("language", Activity.MODE_PRIVATE);
		
		imageview7.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_TransitionManager(tools, 200);
				if (show) {
					show = false;
					tools.setVisibility(View.VISIBLE);
				} else {
					show = true;
					tools.setVisibility(View.GONE);
				}
			}
		});
		
		search_btn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_TransitionManager(search_bar, 200);
				search_bar.setVisibility(View.VISIBLE);
			}
		});
		
		imageview6.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				i.setClass(getApplicationContext(), MobilelauncherActivity.class);
				startActivity(i);
				finish();
			}
		});
		
		edittext1.addTextChangedListener(new TextWatcher() {
			@Override
			public void onTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {
				final String _charSeq = _param1.toString();
				if (edittext1.getText().toString().length() > 0) {
					_searchInListmap(edittext1.getText().toString().toLowerCase(), cache, "title");
					listview1.setAdapter(new Listview1Adapter(cache));
					if (cache.size() > 0) {
						listview1.setVisibility(View.VISIBLE);
					} else {
						listview1.setVisibility(View.GONE);
					}
				} else {
					listview1.setAdapter(new Listview1Adapter(maplist));
				}
			}
			
			@Override
			public void beforeTextChanged(CharSequence _param1, int _param2, int _param3, int _param4) {
				
			}
			
			@Override
			public void afterTextChanged(Editable _param1) {
				
			}
		});
		
		close.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_TransitionManager(bin, 200);
				search_bar.setVisibility(View.INVISIBLE);
				if (edittext1.getText().toString().length() > 0) {
					listview1.setAdapter(new Listview1Adapter(maplist));
					search_bar.setVisibility(View.INVISIBLE);
					edittext1.setText("");
					cache.clear();
				}
			}
		});
		
		allv.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_hideGreen();
				_offBoolean();
				f = true;
				green0.setVisibility(View.VISIBLE);
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				_hide();
				allv.setBackgroundColor(0xFF118846);
			}
		});
		
		betaLinear.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_hideGreen();
				_offBoolean();
				a = true;
				green1.setVisibility(View.VISIBLE);
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				_hide();
				betaLinear.setBackgroundColor(0xFF118846);
			}
		});
		
		alphaLinear.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_hideGreen();
				_offBoolean();
				b = true;
				green2.setVisibility(View.VISIBLE);
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				_hide();
				alphaLinear.setBackgroundColor(0xFF118846);
			}
		});
		
		moddedLinear.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_hideGreen();
				_offBoolean();
				c = true;
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				green3.setVisibility(View.VISIBLE);
				_hide();
				moddedLinear.setBackgroundColor(0xFF118846);
			}
		});
		
		patchLinear.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				_offBoolean();
				_hideGreen();
				d = true;
				green4.setVisibility(View.VISIBLE);
				((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
				_hide();
				patchLinear.setBackgroundColor(0xFF118846);
			}
		});
		
		saves.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View _view) {
				i.setClass(getApplicationContext(), SaveActivity.class);
				startActivity(i);
				overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out);
			}
		});
		
		_code_child_listener = new ChildEventListener() {
			@Override
			public void onChildAdded(DataSnapshot _param1, String _param2) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				code.addListenerForSingleValueEvent(new ValueEventListener() {
					@Override
					public void onDataChange(DataSnapshot _dataSnapshot) {
						maplist = new ArrayList<>();
						try {
							GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
							for (DataSnapshot _data : _dataSnapshot.getChildren()) {
								HashMap<String, Object> _map = _data.getValue(_ind);
								maplist.add(_map);
							}
						} catch (Exception _e) {
							_e.printStackTrace();
						}
						_sort(maplist, "title");
						listview1.setAdapter(new Listview1Adapter(maplist));
						((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
						
					}
					@Override
					public void onCancelled(DatabaseError _databaseError) {
					}
				});
			}
			
			@Override
			public void onChildChanged(DataSnapshot _param1, String _param2) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				
			}
			
			@Override
			public void onChildMoved(DataSnapshot _param1, String _param2) {
				
			}
			
			@Override
			public void onChildRemoved(DataSnapshot _param1) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				
			}
			
			@Override
			public void onCancelled(DatabaseError _param1) {
				final int _errorCode = _param1.getCode();
				final String _errorMessage = _param1.getMessage();
				
			}
		};
		code.addChildEventListener(_code_child_listener);
		
		_user_child_listener = new ChildEventListener() {
			@Override
			public void onChildAdded(DataSnapshot _param1, String _param2) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				
			}
			
			@Override
			public void onChildChanged(DataSnapshot _param1, String _param2) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				
			}
			
			@Override
			public void onChildMoved(DataSnapshot _param1, String _param2) {
				
			}
			
			@Override
			public void onChildRemoved(DataSnapshot _param1) {
				GenericTypeIndicator<HashMap<String, Object>> _ind = new GenericTypeIndicator<HashMap<String, Object>>() {};
				final String _childKey = _param1.getKey();
				final HashMap<String, Object> _childValue = _param1.getValue(_ind);
				
			}
			
			@Override
			public void onCancelled(DatabaseError _param1) {
				final int _errorCode = _param1.getCode();
				final String _errorMessage = _param1.getMessage();
				
			}
		};
		user.addChildEventListener(_user_child_listener);
		
		auth_updateEmailListener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		auth_updatePasswordListener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		auth_emailVerificationSentListener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		auth_deleteUserListener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		auth_phoneAuthListener = new OnCompleteListener<AuthResult>() {
			@Override
			public void onComplete(Task<AuthResult> task) {
				final boolean _success = task.isSuccessful();
				final String _errorMessage = task.getException() != null ? task.getException().getMessage() : "";
				
			}
		};
		
		auth_updateProfileListener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		auth_googleSignInListener = new OnCompleteListener<AuthResult>() {
			@Override
			public void onComplete(Task<AuthResult> task) {
				final boolean _success = task.isSuccessful();
				final String _errorMessage = task.getException() != null ? task.getException().getMessage() : "";
				
			}
		};
		
		_auth_create_user_listener = new OnCompleteListener<AuthResult>() {
			@Override
			public void onComplete(Task<AuthResult> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		_auth_sign_in_listener = new OnCompleteListener<AuthResult>() {
			@Override
			public void onComplete(Task<AuthResult> _param1) {
				final boolean _success = _param1.isSuccessful();
				final String _errorMessage = _param1.getException() != null ? _param1.getException().getMessage() : "";
				
			}
		};
		
		_auth_reset_password_listener = new OnCompleteListener<Void>() {
			@Override
			public void onComplete(Task<Void> _param1) {
				final boolean _success = _param1.isSuccessful();
				
			}
		};
	}
	
	private void initializeLogic() {
		toolbar.setElevation((float)6);
		search_bar.setElevation((float)6);
		search_btn.setColorFilter(0xFF2B4360, PorterDuff.Mode.MULTIPLY);
		search_bar.setVisibility(View.INVISIBLE);
		
		final androidx.swiperefreshlayout.widget.SwipeRefreshLayout sketch44 = new androidx.swiperefreshlayout.widget.SwipeRefreshLayout(JavacodeActivity.this);
		sketch44.setLayoutParams(new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.MATCH_PARENT));
		sketch44.setColorSchemeResources(R.color.colorAccent);
		voi.removeView(listview1);
		sketch44.addView(listview1);
		voi.addView(sketch44);
		
		
		
		sketch44.setOnRefreshListener(new androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener() {
			@Override
			public void onRefresh() {
				sketch44.setRefreshing(false);
				
				_refresh();
				
			}
		} );
		ImageView search_btn = findViewById(R.id.search_btn); // Đảm bảo ID của ImageView là mojang_logo
		search_btn.setColorFilter(Color.parseColor("#ffffff"), PorterDuff.Mode.SRC_ATOP);
		
		_hideGreen();
		f = true;
		if (java.contains("java")) {
			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
		}
		green0.setVisibility(View.VISIBLE);
		tools.setVisibility(View.INVISIBLE);
		_internetCheck();
		_hide();
		allv.setBackgroundColor(0xFF118846);
	}
	
	
	@Override
	public void onBackPressed() {
		i.setClass(getApplicationContext(), MobilelauncherActivity.class);
		startActivity(i);
		finish();
	}
	public void _TransitionManager(final View _view, final double _duration) {
		LinearLayout viewgroup =(LinearLayout) _view;
		
		android.transition.AutoTransition autoTransition = new android.transition.AutoTransition(); autoTransition.setDuration((long)_duration); android.transition.TransitionManager.beginDelayedTransition(viewgroup, autoTransition);
	}
	
	
	public void _searchInListmap(final String _value, final ArrayList<HashMap<String, Object>> _listmap, final String _key) {
		_listmap.clear();
		n1 = 0;
		for(int _repeat13 = 0; _repeat13 < (int)(maplist.size()); _repeat13++) {
			if (maplist.get((int)n1).get(_key).toString().toLowerCase().contains(_value)) {
				cacheMap = maplist.get((int)n1);
				_listmap.add(cacheMap);
			}
			n1++;
		}
	}
	
	
	public void _gd(final View _view, final double _numb, final String _color) {
		android.graphics.drawable.GradientDrawable gd = new android.graphics.drawable.GradientDrawable();
		gd.setColor(Color.parseColor(_color));
		gd.setCornerRadius((int)_numb);
		_view.setBackground(gd);
	}
	
	
	public void _Round_loading_dialog(final boolean _visibility) {
		if (_visibility) {
			if (LoadingDialog== null){
					LoadingDialog = new ProgressDialog(this);
					
				LoadingDialog.setCancelable(false);
					LoadingDialog.setCanceledOnTouchOutside(false);
					
					LoadingDialog.requestWindowFeature(Window.FEATURE_NO_TITLE); 
					LoadingDialog.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.TRANSPARENT));
					
			}
			LoadingDialog.show();
			LoadingDialog.setContentView(R.layout.loading_bar);
			
			LinearLayout loading_bar_layout = (LinearLayout)LoadingDialog.findViewById(R.id.loading_bar_layout);
			
			
			loading_bar_layout.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b) { this.setCornerRadius(a); this.setColor(b); return this; } }.getIns((int)100, 0xFFFFFFFF));
		} else {
			if (LoadingDialog != null){
				LoadingDialog.dismiss();
			}
		}
	}
	private ProgressDialog LoadingDialog;
	{
	}
	
	
	public void _round_corner_and_ripple(final View _view, final double _radius, final double _shadow, final String _color, final boolean _ripple) {
		if (_ripple) {
			android.graphics.drawable.GradientDrawable gd = new android.graphics.drawable.GradientDrawable();
			gd.setColor(Color.parseColor(_color));
			gd.setCornerRadius((int)_radius);
			_view.setElevation((int)_shadow);
			android.content.res.ColorStateList clrb = new android.content.res.ColorStateList(new int[][]{new int[]{}}, new int[]{Color.parseColor("#9e9e9e")});
			android.graphics.drawable.RippleDrawable ripdrb = new android.graphics.drawable.RippleDrawable(clrb , gd, null);
			_view.setClickable(true);
			_view.setBackground(ripdrb);
		} else {
			android.graphics.drawable.GradientDrawable gd = new android.graphics.drawable.GradientDrawable();
			gd.setColor(Color.parseColor(_color));
			gd.setCornerRadius((int)_radius);
			_view.setBackground(gd);
			_view.setElevation((int)_shadow);
		}
	}
	
	
	public void _refresh() {
		listview1.setAdapter(new Listview1Adapter(maplist));
		((BaseAdapter)listview1.getAdapter()).notifyDataSetChanged();
		cache.clear();
		search_bar.setVisibility(View.INVISIBLE);
		edittext1.setText("");
	}
	
	
	public void _sort(final ArrayList<HashMap<String, Object>> _mylist, final String _key) {
		Comparator<HashMap<String, Object>> list_sorter = new Comparator<HashMap<String, Object>>() {
			    @Override
			    public int compare(HashMap<String, Object> map1, HashMap<String, Object> map2) {
				        // Kiểm tra nếu cả hai map đều chứa khóa _key
				        if (!map1.containsKey(_key) || !map2.containsKey(_key)) {
					            return 0; // Trả về 0 nếu một trong hai map không chứa khóa _key
					        }
				
				        // Lấy giá trị của _key từ map1 và map2
				        Object value1 = map1.get(_key);
				        Object value2 = map2.get(_key);
				
				        // Kiểm tra giá trị có phải là null không
				        if (value1 == null || value2 == null) {
					            return 0; // Nếu một trong hai giá trị là null, coi chúng như bằng nhau
					        }
				
				        // Tách các phiên bản thành các phần số
				        String[] version1Parts = value1.toString().split("\\.");
				        String[] version2Parts = value2.toString().split("\\.");
				
				        int length = Math.max(version1Parts.length, version2Parts.length);
				
				        for (int i = 0; i < length; i++) {
					            int v1 = 0, v2 = 0;
					
					            // Chuyển phần tử thành số (hoặc bỏ qua nếu không hợp lệ)
					            try {
						                v1 = i < version1Parts.length ? Integer.parseInt(version1Parts[i]) : 0;
						            } catch (NumberFormatException e) {
						                System.err.println("Không thể chuyển đổi: " + version1Parts[i]);
						            }
					
					            try {
						                v2 = i < version2Parts.length ? Integer.parseInt(version2Parts[i]) : 0;
						            } catch (NumberFormatException e) {
						                System.err.println("Không thể chuyển đổi: " + version2Parts[i]);
						            }
					
					            // So sánh từng phần tử số của phiên bản
					            if (v1 != v2) {
						                return Integer.compare(v2, v1); // So sánh giảm dần (phiên bản mới nhất ở đầu)
						            }
					        }
				
				        return 0; // Nếu tất cả các phần tử đều bằng nhau
				    }
		};
		
		// Sắp xếp danh sách _mylist
		Collections.sort(_mylist, list_sorter);
	}
	
	
	public void _removeScollBar(final View _view) {
		_view.setVerticalScrollBarEnabled(false); _view.setHorizontalScrollBarEnabled(false);
	}
	
	
	public void _font() {
		
	}
	
	
	public void _hideGreen() {
		green0.setVisibility(View.INVISIBLE);
		green1.setVisibility(View.INVISIBLE);
		green2.setVisibility(View.INVISIBLE);
		green3.setVisibility(View.INVISIBLE);
		green4.setVisibility(View.INVISIBLE);
	}
	
	
	public void _offBoolean() {
		a = false;
		b = false;
		c = false;
		d = false;
		f = false;
	}
	
	
	public void _internetCheck() {
		android.net.ConnectivityManager cm = (android.net.ConnectivityManager) this.getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
		android.net.NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
		
		if ((activeNetwork != null)) {
			if ((activeNetwork.getType() == android.net.ConnectivityManager.TYPE_WIFI) || (activeNetwork.getType() == android.net.ConnectivityManager.TYPE_MOBILE)) {
				tools.setVisibility(View.VISIBLE);
				search_bar.setVisibility(View.VISIBLE);
				imageview7.setVisibility(View.VISIBLE);
				search_btn.setVisibility(View.VISIBLE);
			}
		} else {
			tools.setVisibility(View.GONE);
			search_bar.setVisibility(View.GONE);
			imageview7.setVisibility(View.GONE);
			search_btn.setVisibility(View.GONE);
		}
	}
	
	
	public void _hide() {
		allv.setBackgroundColor(Color.TRANSPARENT);
		betaLinear.setBackgroundColor(Color.TRANSPARENT);
		alphaLinear.setBackgroundColor(Color.TRANSPARENT);
		moddedLinear.setBackgroundColor(Color.TRANSPARENT);
		patchLinear.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public class Listview1Adapter extends BaseAdapter {
		
		ArrayList<HashMap<String, Object>> _data;
		
		public Listview1Adapter(ArrayList<HashMap<String, Object>> _arr) {
			_data = _arr;
		}
		
		@Override
		public int getCount() {
			return _data.size();
		}
		
		@Override
		public HashMap<String, Object> getItem(int _index) {
			return _data.get(_index);
		}
		
		@Override
		public long getItemId(int _index) {
			return _index;
		}
		
		@Override
		public View getView(final int _position, View _v, ViewGroup _container) {
			LayoutInflater _inflater = getLayoutInflater();
			View _view = _v;
			if (_view == null) {
				_view = _inflater.inflate(R.layout.javas, null);
			}
			
			final LinearLayout linear1 = _view.findViewById(R.id.linear1);
			final ImageView imageview1 = _view.findViewById(R.id.imageview1);
			final TextView textview1 = _view.findViewById(R.id.textview1);
			
			linear1.setElevation((float)5);
			linear1.setBackground(new GradientDrawable() { public GradientDrawable getIns(int a, int b) { this.setCornerRadius(a); this.setColor(b); return this; } }.getIns((int)0, 0xF2323232));
			textview1.setTypeface(Typeface.createFromAsset(getAssets(),"fonts/fontinhoa.ttf"), 1);
			textview1.setText(_data.get((int)_position).get("title").toString());
			textview1.setTextColor(0xFFFFFFFF);
			if (_data.get((int)_position).containsKey("title")) {
				textview1.setText(_data.get((int)_position).get("title").toString());
			}
			Glide.with(getApplicationContext())
			     .load(Uri.parse(_data.get((int) _position).get("image").toString()))
			     .diskCacheStrategy(DiskCacheStrategy.ALL)  // Tải và lưu cache để tối ưu tốc độ
			     .into(imageview1);
			linear1.setOnClickListener(new View.OnClickListener() {
				@Override
				public void onClick(View _view) {
					i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
					i.setClass(getApplicationContext(), CodeviewActivity.class);
					i.putExtra("key", _data.get((int)_position).get("key").toString());
					i.putExtra("image", _data.get((int)_position).get("image").toString());
					startActivity(i);
				}
			});
			if (_data.get((int) _position).containsKey("type")) {
				    String typeValue = _data.get((int) _position).get("type").toString();
				
				    // Kiểm tra tất cả các điều kiện một cách gọn gàng
				    if (("all".equals(typeValue) && f) ||
				        ("beta".equals(typeValue) && a) ||
				        ("other".equals(typeValue) && b) ||
				        ("modded".equals(typeValue) && c) ||
				        ("patch".equals(typeValue) && d)) {
					        // Hiển thị nếu điều kiện đúng
					        linear1.setVisibility(View.VISIBLE);
					    } else {
					        // Ẩn nếu không thỏa điều kiện
					        linear1.setVisibility(View.GONE);
					    }
			}
			
			return _view;
		}
	}
	
	@Deprecated
	public void showMessage(String _s) {
		Toast.makeText(getApplicationContext(), _s, Toast.LENGTH_SHORT).show();
	}
	
	@Deprecated
	public int getLocationX(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[0];
	}
	
	@Deprecated
	public int getLocationY(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[1];
	}
	
	@Deprecated
	public int getRandom(int _min, int _max) {
		Random random = new Random();
		return random.nextInt(_max - _min + 1) + _min;
	}
	
	@Deprecated
	public ArrayList<Double> getCheckedItemPositionsToArray(ListView _list) {
		ArrayList<Double> _result = new ArrayList<Double>();
		SparseBooleanArray _arr = _list.getCheckedItemPositions();
		for (int _iIdx = 0; _iIdx < _arr.size(); _iIdx++) {
			if (_arr.valueAt(_iIdx))
			_result.add((double)_arr.keyAt(_iIdx));
		}
		return _result;
	}
	
	@Deprecated
	public float getDip(int _input) {
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, _input, getResources().getDisplayMetrics());
	}
	
	@Deprecated
	public int getDisplayWidthPixels() {
		return getResources().getDisplayMetrics().widthPixels;
	}
	
	@Deprecated
	public int getDisplayHeightPixels() {
		return getResources().getDisplayMetrics().heightPixels;
	}
}